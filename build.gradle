import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask

plugins {
    id 'java'
    id 'idea'
    id 'edu.sc.seis.launch4j' version '2.4.6'
    id 'application'

    id 'org.openjfx.javafxplugin' version '0.0.9'
}

repositories {
    jcenter()
}

dependencies {
    implementation 'com.google.guava:guava:29.0-jre'

    testImplementation 'junit:junit:4.13'
}

project.ext.version = '0.0.1-alpha'
project.ext.name = 'capsnet-software-simulator'
project.ext.mainClassName = 'ml.ovcorp.capsnet.simulator.App'

application {
    mainClassName = project.ext.mainClassName
}

javafx {
    version = "14"
    modules = [ "javafx.controls", "javafx.fxml" ]
}

jar {
    archiveBaseName.set(project.ext.name)
}

task copyDepn(type: Copy) {
    from(configurations.runtimeClasspath)
    into project.file('build/libs/libs')
}

task copyJarToBin(type: Copy) {
    from file("build/libs/" + project.ext.name + ".jar")
    into file("build/bin")
}

task jarWithDependencies(type: Jar) {
    manifest {
        def classPathArray = configurations.runtimeClasspath.collect { it.getName() }

        def classPathResult = 'libs/' + classPathArray.join(' libs/')

        attributes 'Main-Class': project.ext.mainClassName
        attributes 'Class-Path': classPathResult
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task jarAndLibs(type: Jar) {
    manifest {
        def classPathArray = configurations.runtimeClasspath.collect { it.getName() }

        def classPathResult = 'libs/' + classPathArray.join(' libs/')

        attributes 'Main-Class': project.ext.mainClassName
        attributes 'Class-Path': classPathResult
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : null } }
    with jar
}

// Сборка exe
task buildExe(type: Launch4jLibraryTask) {
    def classPathArray = configurations.runtimeClasspath.collect { it.getName() }

    def classPathResult = 'libs/' + classPathArray.join(';libs/')

    headerType = "gui"
    libraryDir = "libs"
    outputDir = "bin"
    mainClassName = project.ext.mainClassName
    outfile = "capsnss.exe"
    version = project.ext.version

    Set<String> sets = new HashSet<String>()

    def modules = javafx.modules.join(",")
    sets.add('--module-path "' + classPathResult + '" --add-modules "' + modules + '"')

    jvmOptions = sets
    // icon = "${projectDir}/src/main/resources/images/icon.ico"
    jar = "../libs/" + project.ext.name + ".jar"
}

task buildScripts(type: CreateStartScripts) {

    outputDir = file('build/bin')
    applicationName = project.ext.name
    classpath = null

    def classPathArray = configurations.runtimeClasspath.collect { it.getName() }

    def classPathResult = 'libs/' + classPathArray.join(';libs/')

    def modules = javafx.modules.join(",")

    List<String> opts = new ArrayList<>()
    opts.add('--module-path')
    opts.add(classPathResult)
    opts.add('--add-modules')
    opts.add(modules)

    defaultJvmOpts = opts
    mainClass.set('-jar ' + project.ext.name + '.jar')
}

task cleanTempJar(type: Delete) {
    delete fileTree("$buildDir/bin/libs").matching {
        include project.ext.name + ".jar"
    }
}

task buildAll {}

sourceSets {
    main {
        output.resourcesDir = "build/classes/java/main"
    }
    test {
        output.resourcesDir = "build/classes/java/test"
    }
}

jarWithDependencies.dependsOn copyDepn
jarAndLibs.dependsOn copyDepn
buildExe.dependsOn jarAndLibs
buildScripts.dependsOn copyJarToBin
buildScripts.dependsOn jarAndLibs

cleanTempJar.dependsOn buildScripts
buildAll.dependsOn buildExe
buildAll.dependsOn buildScripts